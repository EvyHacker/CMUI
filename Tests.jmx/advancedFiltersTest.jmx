<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1 r1853635">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">TestFilters</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://primary-staging-pecos.cjdbpcjxnun2.us-east-1.rds.amazonaws.com/pecos</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">P3c0s123</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">pecosadmin</stringProp>
        <stringProp name="initQuery"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Advanced Filter" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1542304901000</longProp>
        <longProp name="ThreadGroup.end_time">1542304901000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="envt" elementType="Argument">
              <stringProp name="Argument.name">envt</stringProp>
              <stringProp name="Argument.value">staging2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request:1 - SingleformType" enabled="true">
          <stringProp name="dataSource">TestFilters</stringProp>
          <stringProp name="query">select count(*) from case_management.pecos_case
where aplctn_type=&apos;855B&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
          <stringProp name="resultVariable">Records</stringProp>
          <stringProp name="variableNames">1DBCount</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Records&quot;).size() == 0) {

	FailureMessage = &quot; data not received&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}

else {

	int TotalRecords = vars.getObject(&quot;Records&quot;).size();
	SucessMessage = &quot;TotalRecords =&quot; + TotalRecords ;
	
}

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request: 2 - MultipleformTypes" enabled="true">
          <stringProp name="dataSource">TestFilters</stringProp>
          <stringProp name="query">select count(*) from case_management.pecos_case
where aplctn_type in(&apos;855I&apos;,&apos;855B&apos;) </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
          <stringProp name="resultVariable">Records</stringProp>
          <stringProp name="variableNames">2DBCount</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Records&quot;).size() == 0) {

	FailureMessage = &quot; data not received&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}

else {

	int TotalRecords = vars.getObject(&quot;Records&quot;).size();
	SucessMessage = &quot;TotalRecords =&quot; + TotalRecords ;
	
}

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request: 3 - Formtype&amp;OwnedBy" enabled="true">
          <stringProp name="dataSource">TestFilters</stringProp>
          <stringProp name="query">select count(*) from case_management.pecos_case pc
left join case_management.pecos_case_routg pcr on pc.case_id = pcr.case_id
left join case_management.routg_cntrct rc on pcr.pecos_case_routg_id = rc.pecos_case_routg_id
left join case_management.pecos_cntrctr_new cntrct on rc.cntrctr_new_id = cntrct.cntrctr_new_id
left join case_management.pecos_jrsdctn pj on cntrct.jrsdctn_id = pj.jrsdctn_id
left join case_management.pecos_org po on pj.org_id = po.org_id
WHERE 1=1  AND UPPER(pc.aplctn_type) IN (&apos;855I&apos;, &apos;855B&apos;)  
AND UPPER(po.org_Name) IN (&apos;CGS ADMINISTRATORS LLC&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
          <stringProp name="resultVariable">Records</stringProp>
          <stringProp name="variableNames">3DBCount</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Records&quot;).size() == 0) {

	FailureMessage = &quot; data not received&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}

else {

	int TotalRecords = vars.getObject(&quot;Records&quot;).size();
	SucessMessage = &quot;TotalRecords =&quot; + TotalRecords ;
	
}

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request: 4 - Formtype&amp;OwnedBy&amp;Date" enabled="true">
          <stringProp name="dataSource">TestFilters</stringProp>
          <stringProp name="query">select count(*) from case_management.pecos_case pc
left join case_management.pecos_case_routg pcr on pc.case_id = pcr.case_id
left join case_management.routg_cntrct rc on pcr.pecos_case_routg_id = rc.pecos_case_routg_id
left join case_management.pecos_cntrctr_new cntrct on rc.cntrctr_new_id = cntrct.cntrctr_new_id
left join case_management.pecos_jrsdctn pj on cntrct.jrsdctn_id = pj.jrsdctn_id
left join case_management.pecos_org po on pj.org_id = po.org_id
WHERE 1=1  AND UPPER(pc.aplctn_type) IN (&apos;855I&apos;, &apos;855B&apos;)  
AND UPPER(po.org_Name) IN (&apos;CGS ADMINISTRATORS LLC&apos;)
AND cast(pc.strt_ts as Date) &gt;= &apos;2019-01-01&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
          <stringProp name="resultVariable">Records</stringProp>
          <stringProp name="variableNames">4DBcount</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Records&quot;).size() == 0) {

	FailureMessage = &quot; data not received&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}

else {

	int TotalRecords = vars.getObject(&quot;Records&quot;).size();
	SucessMessage = &quot;TotalRecords =&quot; + TotalRecords ;
	
}

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request: 5 - Formtype&amp;Assignee" enabled="true">
          <stringProp name="dataSource">TestFilters</stringProp>
          <stringProp name="query">select count(*) from case_management.pecos_case pc
left join case_management.pecos_case_routg pcr on pc.case_id = pcr.case_id
left join case_management.routg_cntrct rc on pcr.pecos_case_routg_id = rc.pecos_case_routg_id
left join case_management.pecos_cntrctr_new cntrct on rc.cntrctr_new_id = cntrct.cntrctr_new_id
left join case_management.pecos_jrsdctn pj on cntrct.jrsdctn_id = pj.jrsdctn_id
left join case_management.pecos_org po on pj.org_id = po.org_id
WHERE 1=1  AND UPPER(pc.aplctn_type) IN (&apos;855I&apos;, &apos;855B&apos;)  
AND pc.asgned_user like &apos;Anna%&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
          <stringProp name="resultVariable">Records</stringProp>
          <stringProp name="variableNames">5DBcount</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Records&quot;).size() == 0) {

	FailureMessage = &quot; data not received&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}

else {

	int TotalRecords = vars.getObject(&quot;Records&quot;).size();
	SucessMessage = &quot;TotalRecords =&quot; + TotalRecords ;
	
}

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request: 6 - Formtype&amp;Status" enabled="true">
          <stringProp name="dataSource">TestFilters</stringProp>
          <stringProp name="query">select count(*) from case_management.pecos_case pc
left join case_management.pecos_case_routg pcr on pc.case_id = pcr.case_id
left join case_management.routg_cntrct rc on pcr.pecos_case_routg_id = rc.pecos_case_routg_id
left join case_management.pecos_cntrctr_new cntrct on rc.cntrctr_new_id = cntrct.cntrctr_new_id
left join case_management.pecos_jrsdctn pj on cntrct.jrsdctn_id = pj.jrsdctn_id
left join case_management.pecos_org po on pj.org_id = po.org_id
WHERE 1=1  AND UPPER(pc.aplctn_type) IN (&apos;855I&apos;, &apos;855B&apos;)  
AND UPPER(po.org_Name) IN (&apos;CGS ADMINISTRATORS LLC&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
          <stringProp name="resultVariable">Records</stringProp>
          <stringProp name="variableNames">6DBCount</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Records&quot;).size() == 0) {

	FailureMessage = &quot; data not received&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}

else {

	int TotalRecords = vars.getObject(&quot;Records&quot;).size();
	SucessMessage = &quot;TotalRecords =&quot; + TotalRecords ;
	
}

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request: 7 - SingleStatus" enabled="true">
          <stringProp name="dataSource">TestFilters</stringProp>
          <stringProp name="query">select count(*) from case_management.pecos_case pc
where UPPER(pc.case_stus) IN (&apos;ASSIGNED&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
          <stringProp name="resultVariable">Records</stringProp>
          <stringProp name="variableNames">7DBCount</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Records&quot;).size() == 0) {

	FailureMessage = &quot; data not received&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}

else {

	int TotalRecords = vars.getObject(&quot;Records&quot;).size();
	SucessMessage = &quot;TotalRecords =&quot; + TotalRecords ;
	
}

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request: 8 - MultiStatus" enabled="true">
          <stringProp name="dataSource">TestFilters</stringProp>
          <stringProp name="query">select count(*) from case_management.pecos_case pc
WHERE UPPER(pc.case_stus) IN (&apos;ASSIGNED&apos;, &apos;IN_REVIEW&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
          <stringProp name="resultVariable">Records</stringProp>
          <stringProp name="variableNames">8DBCount</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Records&quot;).size() == 0) {

	FailureMessage = &quot; data not received&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}

else {

	int TotalRecords = vars.getObject(&quot;Records&quot;).size();
	SucessMessage = &quot;TotalRecords =&quot; + TotalRecords ;
	
}

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request: 9 - OwnedBy" enabled="true">
          <stringProp name="dataSource">TestFilters</stringProp>
          <stringProp name="query">select count(*) from case_management.pecos_case pc
left join case_management.pecos_case_routg pcr on pc.case_id = pcr.case_id
left join case_management.routg_cntrct rc on pcr.pecos_case_routg_id = rc.pecos_case_routg_id
left join case_management.pecos_cntrctr_new cntrct on rc.cntrctr_new_id = cntrct.cntrctr_new_id
left join case_management.pecos_jrsdctn pj on cntrct.jrsdctn_id = pj.jrsdctn_id
left join case_management.pecos_org po on pj.org_id = po.org_id
WHERE 1=1 
AND UPPER(po.org_Name) IN (&apos;CGS ADMINISTRATORS LLC&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
          <stringProp name="resultVariable">Records</stringProp>
          <stringProp name="variableNames">9DBCount</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Records&quot;).size() == 0) {

	FailureMessage = &quot; data not received&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}

else {

	int TotalRecords = vars.getObject(&quot;Records&quot;).size();
	SucessMessage = &quot;TotalRecords =&quot; + TotalRecords ;
	
}

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request: 10 - MultiOwnedBy" enabled="true">
          <stringProp name="dataSource">TestFilters</stringProp>
          <stringProp name="query">select count(*) from case_management.pecos_case pc
left join case_management.pecos_case_routg pcr on pc.case_id = pcr.case_id
left join case_management.routg_cntrct rc on pcr.pecos_case_routg_id = rc.pecos_case_routg_id
left join case_management.pecos_cntrctr_new cntrct on rc.cntrctr_new_id = cntrct.cntrctr_new_id
left join case_management.pecos_jrsdctn pj on cntrct.jrsdctn_id = pj.jrsdctn_id
left join case_management.pecos_org po on pj.org_id = po.org_id
WHERE 1=1 
AND UPPER(po.org_Name) IN (&apos;CGS ADMINISTRATORS LLC&apos;,&apos;NOVITAS SOLUTIONS INC&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
          <stringProp name="resultVariable">Records</stringProp>
          <stringProp name="variableNames">10DBCount</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Records&quot;).size() == 0) {

	FailureMessage = &quot; data not received&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}

else {

	int TotalRecords = vars.getObject(&quot;Records&quot;).size();
	SucessMessage = &quot;TotalRecords =&quot; + TotalRecords ;
	
}

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request: 11 - Assignee" enabled="true">
          <stringProp name="dataSource">TestFilters</stringProp>
          <stringProp name="query">select count(*) from case_management.pecos_case pc
left join case_management.pecos_case_routg pcr on pc.case_id = pcr.case_id
left join case_management.routg_cntrct rc on pcr.pecos_case_routg_id = rc.pecos_case_routg_id
left join case_management.pecos_cntrctr_new cntrct on rc.cntrctr_new_id = cntrct.cntrctr_new_id
left join case_management.pecos_jrsdctn pj on cntrct.jrsdctn_id = pj.jrsdctn_id
left join case_management.pecos_org po on pj.org_id = po.org_id
WHERE 1=1  
AND pc.asgned_user like &apos;Tony%&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
          <stringProp name="resultVariable">Records</stringProp>
          <stringProp name="variableNames">11DBcount</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Records&quot;).size() == 0) {

	FailureMessage = &quot; data not received&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}

else {

	int TotalRecords = vars.getObject(&quot;Records&quot;).size();
	SucessMessage = &quot;TotalRecords =&quot; + TotalRecords ;
	
}

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request: 12 - Date" enabled="true">
          <stringProp name="dataSource">TestFilters</stringProp>
          <stringProp name="query">select count(*) from case_management.pecos_case pc
left join case_management.pecos_case_routg pcr on pc.case_id = pcr.case_id
left join case_management.routg_cntrct rc on pcr.pecos_case_routg_id = rc.pecos_case_routg_id
left join case_management.pecos_cntrctr_new cntrct on rc.cntrctr_new_id = cntrct.cntrctr_new_id
left join case_management.pecos_jrsdctn pj on cntrct.jrsdctn_id = pj.jrsdctn_id
left join case_management.pecos_org po on pj.org_id = po.org_id
WHERE 1=1  
AND cast(pc.strt_ts as Date) between &apos;2019/02/09&apos; and &apos;2019/02/11&apos;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Count Records</stringProp>
          <stringProp name="resultVariable">Records</stringProp>
          <stringProp name="variableNames">12DBcount</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">if (!ResponseCode.equals(&quot;200&quot;) || vars.getObject(&quot;Records&quot;).size() == 0) {

	FailureMessage = &quot; data not received&quot;;
	Failure = true;	
	prev.setStopThread(true);
	
}

else {

	int TotalRecords = vars.getObject(&quot;Records&quot;).size();
	SucessMessage = &quot;TotalRecords =&quot; + TotalRecords ;
	
}

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request :1 - FormType" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">case-management-api-${envt}.apps.pecos-staging.cpi.cmscloud.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">casemanagement/filterSearch?search=formType%3D855B</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response StatusCode Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">1APICount</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-949882892">${1DBCount_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">1APICount_matchNr</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request :2 - MultipleFormTypes" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">case-management-api-${envt}.apps.pecos-staging.cpi.cmscloud.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">casemanagement/filterSearch?search=formType%3D855I%2C855B</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response StatusCode Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">2APICount</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1548133045">${2DBCount_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">2APICount_matchNr</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request :3 - Formtype&amp;OwnedBy" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">case-management-api-${envt}.apps.pecos-staging.cpi.cmscloud.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">casemanagement/filterSearch?search=formType%3D855I%2C855BownedBy%3DCGS%20Administrators%20LLC</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response StatusCode Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">3APICount</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-248818314">${3DBCount_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">3APICount_matchNr</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request :4 - Formtype&amp;OwnedBy&amp;Date" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">case-management-api-${envt}.apps.pecos-staging.cpi.cmscloud.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">casemanagement/filterSearch?search=formType%3D855I%2C855B%26ownedBy%3DCGS%20Administrators%20LLC%26receivedDate%3D2019-02-11%20-%202019-02-11%22</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response StatusCode Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">4APICOUNT</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2110413801">${4DBcount_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">4APICOUNT_matchNr</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request :5 - Formtype&amp;Assignee" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">case-management-api-${envt}.apps.pecos-staging.cpi.cmscloud.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">casemanagement/filterSearch?search=formType%3D855I%2C855B%26assignedTo%3DTony</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response StatusCode Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">5APICOUNT</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="387602136">${5DBcount_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">5APICOUNT_matchNr</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request :6 - Formtype&amp;Status" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">case-management-api-${envt}.apps.pecos-staging.cpi.cmscloud.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">casemanagement/filterSearch?search=formType%3D855I%2C855B%26status%3DAssigned</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response StatusCode Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">3APICount</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-248818314">${3DBCount_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">3APICount_matchNr</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request :7 - SingleStatus" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">case-management-api-${envt}.apps.pecos-staging.cpi.cmscloud.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">casemanagement/filterSearch?search=status%3DAssigned</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response StatusCode Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">3APICount</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-248818314">${3DBCount_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">3APICount_matchNr</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request :8 - MultiStatus" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">case-management-api-${envt}.apps.pecos-staging.cpi.cmscloud.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">casemanagement/filterSearch?search=status%3DAssigned%2CIN_REVIEW</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response StatusCode Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">8APICount</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-643640517">${8DBCount_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">8APICount_matchNr</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request :9 - OwnedBy" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">case-management-api-${envt}.apps.pecos-staging.cpi.cmscloud.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">casemanagement/filterSearch?search=ownedBy%3DCGS%20Administrators%20LLC</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response StatusCode Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">9APICount</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1854375420">${9DBCount_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">9APICount_matchNr</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request :10 - MultiOwnedBy" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="&lt;?xml version" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;1.0&quot; encoding</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">&lt;?xml version</stringProp>
              </elementProp>
              <elementProp name="&lt;jmeterTestPlan version" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;1.2&quot; properties</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">&lt;jmeterTestPlan version</stringProp>
              </elementProp>
              <elementProp name="  &lt;hashTree&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">  &lt;hashTree&gt;</stringProp>
              </elementProp>
              <elementProp name="    &lt;TestPlan guiclass" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;TestPlanGui&quot; testclass</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">    &lt;TestPlan guiclass</stringProp>
              </elementProp>
              <elementProp name="      &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;TestPlan.comments&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">      &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="      &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;TestPlan.functional_mode&quot;&gt;false&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">      &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="      &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;TestPlan.serialize_threadgroups&quot;&gt;false&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">      &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="      &lt;elementProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;TestPlan.user_defined_variables&quot; elementType</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">      &lt;elementProp name</stringProp>
              </elementProp>
              <elementProp name="        &lt;collectionProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Arguments.arguments&quot;/&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;collectionProp name</stringProp>
              </elementProp>
              <elementProp name="      &lt;/elementProp&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">      &lt;/elementProp&gt;</stringProp>
              </elementProp>
              <elementProp name="      &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;TestPlan.user_define_classpath&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">      &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="    &lt;/TestPlan&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">    &lt;/TestPlan&gt;</stringProp>
              </elementProp>
              <elementProp name="    &lt;hashTree&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">    &lt;hashTree&gt;</stringProp>
              </elementProp>
              <elementProp name="      &lt;ThreadGroup guiclass" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;ThreadGroupGui&quot; testclass</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">      &lt;ThreadGroup guiclass</stringProp>
              </elementProp>
              <elementProp name="        &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;ThreadGroup.on_sample_error&quot;&gt;continue&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="        &lt;elementProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;ThreadGroup.main_controller&quot; elementType</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;elementProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;LoopController.continue_forever&quot;&gt;false&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;LoopController.loops&quot;&gt;1&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="        &lt;/elementProp&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;/elementProp&gt;</stringProp>
              </elementProp>
              <elementProp name="        &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;ThreadGroup.num_threads&quot;&gt;1&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="        &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;ThreadGroup.ramp_time&quot;&gt;1&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="        &lt;longProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;ThreadGroup.start_time&quot;&gt;1538652557000&lt;/longProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;longProp name</stringProp>
              </elementProp>
              <elementProp name="        &lt;longProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;ThreadGroup.end_time&quot;&gt;1536843690000&lt;/longProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;longProp name</stringProp>
              </elementProp>
              <elementProp name="        &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;ThreadGroup.scheduler&quot;&gt;false&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="        &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;ThreadGroup.duration&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="        &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;ThreadGroup.delay&quot;&gt;10&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="        &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;ThreadGroup.delayedStart&quot;&gt;true&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="      &lt;/ThreadGroup&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">      &lt;/ThreadGroup&gt;</stringProp>
              </elementProp>
              <elementProp name="      &lt;hashTree&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">      &lt;hashTree&gt;</stringProp>
              </elementProp>
              <elementProp name="        &lt;ConstantTimer guiclass" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;ConstantTimerGui&quot; testclass</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;ConstantTimer guiclass</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;ConstantTimer.delay&quot;&gt;1000&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="        &lt;/ConstantTimer&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;/ConstantTimer&gt;</stringProp>
              </elementProp>
              <elementProp name="        &lt;hashTree/&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;hashTree/&gt;</stringProp>
              </elementProp>
              <elementProp name="        &lt;Arguments guiclass" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;ArgumentsPanel&quot; testclass</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;Arguments guiclass</stringProp>
              </elementProp>
              <elementProp name="          &lt;collectionProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Arguments.arguments&quot;&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;collectionProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;elementProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;envt&quot; elementType</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;elementProp name</stringProp>
              </elementProp>
              <elementProp name="              &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Argument.name&quot;&gt;envt&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">              &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="              &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Argument.value&quot;&gt;vwofpmoobumbabe&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">              &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="              &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Argument.metadata&quot;&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">              &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;/elementProp&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;/elementProp&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;/collectionProp&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;/collectionProp&gt;</stringProp>
              </elementProp>
              <elementProp name="        &lt;/Arguments&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;/Arguments&gt;</stringProp>
              </elementProp>
              <elementProp name="        &lt;hashTree/&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;hashTree/&gt;</stringProp>
              </elementProp>
              <elementProp name="        &lt;HTTPSamplerProxy guiclass" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HttpTestSampleGui&quot; testclass</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;HTTPSamplerProxy guiclass</stringProp>
              </elementProp>
              <elementProp name="          &lt;elementProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPsampler.Arguments&quot; elementType</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;elementProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;collectionProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Arguments.arguments&quot;/&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;collectionProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;/elementProp&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;/elementProp&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.domain&quot;&gt;national-record-api-${envt}.apps.pecos-staging.cpi.cmscloud.local&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.port&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.protocol&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.contentEncoding&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.path&quot;&gt;providers&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.method&quot;&gt;GET&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.follow_redirects&quot;&gt;false&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.auto_redirects&quot;&gt;true&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.use_keepalive&quot;&gt;true&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.DO_MULTIPART_POST&quot;&gt;false&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.embedded_url_re&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.connect_timeout&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.response_timeout&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="        &lt;/HTTPSamplerProxy&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;/HTTPSamplerProxy&gt;</stringProp>
              </elementProp>
              <elementProp name="        &lt;hashTree&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;hashTree&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;ResponseAssertion guiclass" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;AssertionGui&quot; testclass</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;ResponseAssertion guiclass</stringProp>
              </elementProp>
              <elementProp name="            &lt;collectionProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Asserion.test_strings&quot;&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;collectionProp name</stringProp>
              </elementProp>
              <elementProp name="              &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;49586&quot;&gt;200&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">              &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;/collectionProp&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;/collectionProp&gt;</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Assertion.test_field&quot;&gt;Assertion.response_code&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Assertion.assume_success&quot;&gt;false&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;intProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Assertion.test_type&quot;&gt;1&lt;/intProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;intProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Assertion.custom_message&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;/ResponseAssertion&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;/ResponseAssertion&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;hashTree/&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;hashTree/&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;JSONPostProcessor guiclass" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessorGui&quot; testclass</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;JSONPostProcessor guiclass</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.referenceNames&quot;&gt;entityId&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.jsonPathExprs&quot;&gt;$..providerId&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.match_numbers&quot;&gt;1&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.defaultValues&quot;&gt;No_Default&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Scope.variable&quot;&gt;trackingid&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;/JSONPostProcessor&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;/JSONPostProcessor&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;hashTree/&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;hashTree/&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;JSONPostProcessor guiclass" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessorGui&quot; testclass</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;JSONPostProcessor guiclass</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.referenceNames&quot;&gt;enrollmentId&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.jsonPathExprs&quot;&gt;$..enrollmentId&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.match_numbers&quot;&gt;1&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.defaultValues&quot;&gt;No_Default&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Scope.variable&quot;&gt;trackingid&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;/JSONPostProcessor&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;/JSONPostProcessor&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;hashTree/&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;hashTree/&gt;</stringProp>
              </elementProp>
              <elementProp name="        &lt;/hashTree&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;/hashTree&gt;</stringProp>
              </elementProp>
              <elementProp name="        &lt;HTTPSamplerProxy guiclass" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HttpTestSampleGui&quot; testclass</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;HTTPSamplerProxy guiclass</stringProp>
              </elementProp>
              <elementProp name="          &lt;elementProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPsampler.Arguments&quot; elementType</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;elementProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;collectionProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Arguments.arguments&quot;/&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;collectionProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;/elementProp&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;/elementProp&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.domain&quot;&gt;national-record-api-${envt}.apps.pecos-staging.cpi.cmscloud.local&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.port&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.protocol&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.contentEncoding&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.path&quot;&gt;providers/${entityId}&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.method&quot;&gt;GET&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.follow_redirects&quot;&gt;false&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.auto_redirects&quot;&gt;true&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.use_keepalive&quot;&gt;true&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.DO_MULTIPART_POST&quot;&gt;false&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.embedded_url_re&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.connect_timeout&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.response_timeout&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="        &lt;/HTTPSamplerProxy&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;/HTTPSamplerProxy&gt;</stringProp>
              </elementProp>
              <elementProp name="        &lt;hashTree&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;hashTree&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;ResponseAssertion guiclass" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;AssertionGui&quot; testclass</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;ResponseAssertion guiclass</stringProp>
              </elementProp>
              <elementProp name="            &lt;collectionProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Asserion.test_strings&quot;&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;collectionProp name</stringProp>
              </elementProp>
              <elementProp name="              &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;49586&quot;&gt;200&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">              &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;/collectionProp&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;/collectionProp&gt;</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Assertion.test_field&quot;&gt;Assertion.response_code&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;boolProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Assertion.assume_success&quot;&gt;false&lt;/boolProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;boolProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;intProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Assertion.test_type&quot;&gt;1&lt;/intProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;intProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Assertion.custom_message&quot;&gt;&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;/ResponseAssertion&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;/ResponseAssertion&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;hashTree/&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;hashTree/&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;JSONPostProcessor guiclass" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessorGui&quot; testclass</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;JSONPostProcessor guiclass</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.referenceNames&quot;&gt;entityId&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.jsonPathExprs&quot;&gt;$..providerId&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.match_numbers&quot;&gt;1&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.defaultValues&quot;&gt;No_Default&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Scope.variable&quot;&gt;trackingid&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;/JSONPostProcessor&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;/JSONPostProcessor&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;hashTree/&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;hashTree/&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;JSONPostProcessor guiclass" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessorGui&quot; testclass</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;JSONPostProcessor guiclass</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.referenceNames&quot;&gt;enrollmentId&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.jsonPathExprs&quot;&gt;$..enrollmentId&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.match_numbers&quot;&gt;1&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;JSONPostProcessor.defaultValues&quot;&gt;No_Default&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Scope.variable&quot;&gt;trackingid&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;/JSONPostProcessor&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;/JSONPostProcessor&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;hashTree/&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;hashTree/&gt;</stringProp>
              </elementProp>
              <elementProp name="        &lt;/hashTree&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;/hashTree&gt;</stringProp>
              </elementProp>
              <elementProp name="        &lt;HTTPSamplerProxy guiclass" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HttpTestSampleGui&quot; testclass</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">        &lt;HTTPSamplerProxy guiclass</stringProp>
              </elementProp>
              <elementProp name="          &lt;elementProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPsampler.Arguments&quot; elementType</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;elementProp name</stringProp>
              </elementProp>
              <elementProp name="            &lt;collectionProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;Arguments.arguments&quot;/&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">            &lt;collectionProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;/elementProp&gt;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;/elementProp&gt;</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.domain&quot;&gt;case-management-api-${envt}.apps.pecos-staging.cpi.cmscloud.local&lt;/stringProp&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
              <elementProp name="          &lt;stringProp name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;HTTPSampler.port&quot;&gt;&lt;/st...</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">          &lt;stringProp name</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">case-management-api-${envt}.apps.pecos-staging.cpi.cmscloud.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">casemanagement/filterSearch?search=ownedBy%3DCGS%20Administrators%20LLC%2CNOVITAS%20SOLUTIONS%20INC</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response StatusCode Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">10APICount</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-891617296">${10DBCount_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">10APICount_matchNr</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request :11 - Assignee" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">case-management-api-${envt}.apps.pecos-staging.cpi.cmscloud.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">casemanagement/filterSearch?search=assignedTo%3DTony</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response StatusCode Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">11APICOUNT</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1541754513">${11DBcount_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">11APICOUNT_matchNr</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request :12 - Date" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">case-management-api-${envt}.apps.pecos-staging.cpi.cmscloud.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">casemanagement/filterSearch?search=receivedDate%3D2019-02-09%20-%202019-02-11%22</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response StatusCode Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">12APICOUNT</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[*]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-255196846">${12DBcount_1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">12APICOUNT_matchNr</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
