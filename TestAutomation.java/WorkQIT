WorkQIT

package functional;

import com.coveros.selenified.Browser;
import com.coveros.selenified.Capabilities;
import com.coveros.selenified.OutputFile;
import com.coveros.selenified.Selenified;
import com.coveros.selenified.exceptions.InvalidBrowserException;
import com.coveros.selenified.services.Call;
import com.coveros.selenified.services.HTTP;
import com.google.gson.JsonArray;
import framework.api.Case;
import framework.pages.Login;
import framework.pages.WorkQ;
import org.testng.ITestContext;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

/*
 * @author Sukanya
 * Functional Test for Work Q
 */

public class WorkQIT extends Selenified {

  private final ThreadLocal<WorkQ> WorkQIT = new ThreadLocal<>();

  @BeforeMethod(alwaysRun = true)
  public void setLogIn() {
    WorkQIT.set(new WorkQ(this.apps.get()));
    Login loginPage = new Login(this.apps.get());
    loginPage.navigateToLoginPage();
    loginPage.login("Anna", "password");
    WorkQ WorkQPage = this.WorkQIT.get();
    WorkQPage.navigateToWorkQueue();
  }

  @BeforeClass(alwaysRun = true)
  public void beforeClass(ITestContext test) throws InvalidBrowserException {
    // set the base URL for the tests here
    setTestSite(this, test, "http://page-service-staging.apps.pecos-staging.cpi.cmscloud.local");

    // determining the providers
        Case caze = new Case(new Call(new HTTP(getTestSite(this.getClass().getName(), test)),
                new OutputFile("/tmp", "setup", new Capabilities(new Browser("None")), null,
                        null, null, null, null, null), null));
        JsonArray providers = caze.getProviders();
        // at least 10 rows of data are needed on the WorkQ
        // creating them here for each test case to have access to
        // looping through the available providers, using mods
       for (int count = 0; count < 10; count++) {
         caze.createCase(caze.getProviderId(providers.get(count % providers.size()).getAsJsonObject()), "855I", "INITIAL_ENROLLMENT");
       }
  }

  @Test
  public void verifyWorkQTable() {
    WorkQ WorkQPage = this.WorkQIT.get();
    WorkQPage.verifyWorkQueuePage();
    finish();
  }

  @Test
  public void noFiltersTest(ITestContext context) {
    WorkQ WorkQPage = this.WorkQIT.get();
    WorkQPage.clickOnQuickFilters();
    WorkQPage.selectNoFiltersAndAssertURL(getTestSite(this.getClass().getName(), context));
    finish();
  }

  @Test
  public void unAssignedFiltersTest(ITestContext context) {
    WorkQ WorkQPage = this.WorkQIT.get();
    WorkQPage.clickOnQuickFilters();
    WorkQPage.selectUnassignedFiltersAndAssertURL(getTestSite(this.getClass().getName(), context));
    finish();
  }

  @Test
  public void assignedFiltersTest(ITestContext context) {
    WorkQ WorkQPage = this.WorkQIT.get();
    WorkQPage.clickOnQuickFilters();
    String userId = "QO35";
    WorkQPage.selectAssignedToMeFiltersAndAssertURL(getTestSite(this.getClass().getName(), context), userId);
    finish();
  }

  @Test
  public void allTasksFiltersTest(ITestContext context) {
    WorkQ WorkQPage = this.WorkQIT.get();
    WorkQPage.clickOnQuickFilters();
    int contractId = 15102;
    WorkQPage.selectAllTasksFiltersAndAssertURL(getTestSite(this.getClass().getName(), context), contractId);
    finish();
  }

  @Test
  public void closedTasksFiltersTest(ITestContext context) {
    WorkQ WorkQPage = this.WorkQIT.get();
    WorkQPage.clickOnQuickFilters();
    WorkQPage.selectClosedFiltersAndAssertURL(getTestSite(this.getClass().getName(), context));
    finish();
  }

  @Test
  public void openTasksFiltersTest(ITestContext context) {
    WorkQ WorkQPage = this.WorkQIT.get();
    WorkQPage.clickOnQuickFilters();
    WorkQPage.selectOpenFiltersAndAssertURL(getTestSite(this.getClass().getName(), context));
    finish();
  }

  @Test
  public void keywordSearchTest(ITestContext context) {
    WorkQ WorkQPage = this.WorkQIT.get();
    String keyword = "Anna";
    String formType = "855B,855I";
    WorkQPage.setKeywordStringAndAssertURL(getTestSite(this.getClass().getName(), context), keyword);
    WorkQPage.setFormType855B(getTestSite(this.getClass().getName(), context));
    WorkQPage.setFormType855IAndAssert(getTestSite(this.getClass().getName(), context), keyword, formType);
    finish();
  }

  @Test
  public void statusKeywordTest(ITestContext context) {
    WorkQ WorkQPage = this.WorkQIT.get();
    String status = "routed";
    WorkQPage.statusKeywordSearchAndAssertURL(getTestSite(this.getClass().getName(), context), status);
    finish();
  }


}
